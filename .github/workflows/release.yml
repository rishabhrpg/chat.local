name: Build & Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version type (patch, minor, major)"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm run install-all

      - name: Build React app
        run: npm run build

      - name: Generate version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
          else
            VERSION_TYPE="patch"
          fi

          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Generate new version based on type
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          case $VERSION_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          cd client && npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Create release package
        run: |
          mkdir -p release-package
          
          # Copy server files
          cp -r server/ release-package/
          
          # Create client directory and copy build
          mkdir -p release-package/client
          cp -r client/build/ release-package/client/

          # Copy configuration and package files
          cp config.js release-package/
          cp package.json release-package/
          cp package-lock.json release-package/
          cp README.md release-package/

          # Create uploads directory
          mkdir -p release-package/uploads

          # Create a simple start script
          cat > release-package/start.sh << 'EOF'
          #!/bin/bash
          echo "Installing dependencies..."
          npm install --production
          echo "Starting Local Chat Application..."
          node server/index.js
          EOF
          chmod +x release-package/start.sh

          # Create installation instructions
          cat > release-package/INSTALL.md << 'EOF'
          # Local Chat Application - Installation

          ## Prerequisites
          - Node.js 18 or higher
          - npm

          ## Installation
          1. Extract this package to your desired directory
          2. Run: `npm install --production`
          3. Start the application: `node server/index.js` or `./start.sh`

          ## Configuration
          You can configure the application using environment variables:
          - PORT: Server port (default: 80)
          - HOST: Server host (default: 0.0.0.0)
          - SERVICE_NAME: mDNS service name (default: Local Chat)
          - MDNS_HOSTNAME: mDNS hostname (default: chat.local)

          ## Access
          - Local: http://localhost:PORT
          - Network: http://YOUR_IP:PORT
          - mDNS: http://chat.local:PORT
          EOF

          # Create the release archive
          tar -czf local-chat-${{ steps.version.outputs.version }}.tar.gz -C release-package .

          # Create a zip file as well for Windows users
          cd release-package && zip -r ../local-chat-${{ steps.version.outputs.version }}.zip . && cd ..

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json client/package.json
          git commit -m "Bump version to ${{ steps.version.outputs.version }}" || exit 0

      - name: Create and push tag
        run: |
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}
          git push origin main

      - name: Generate release notes
        id: release_notes
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s" | head -20)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" | head -20)
          fi

          cat > release_notes.md << EOF
          ## 🚀 Release ${{ steps.version.outputs.version }}

          ### 📝 Changes
          $COMMITS

          ### 📦 Installation
          1. Download and extract the archive
          2. Run \`npm install --production\`
          3. Start with \`node server/index.js\` or \`./start.sh\`

          ### 🌐 Features
          - Real-time chat with Socket.IO
          - File sharing capabilities
          - mDNS network discovery
          - SQLite database storage
          - React-based web interface

          ### 💻 Requirements
          - Node.js 18+
          - npm
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Local Chat ${{ steps.version.outputs.version }}"
          body_path: release_notes.md
          files: |
            local-chat-${{ steps.version.outputs.version }}.tar.gz
            local-chat-${{ steps.version.outputs.version }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
